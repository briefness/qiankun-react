{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _cloneDeep from\"lodash/cloneDeep\";var globalState={};var deps={};// 触发全局监听\nfunction emitGlobal(state,prevState){Object.keys(deps).forEach(function(id){if(deps[id]instanceof Function){deps[id](_cloneDeep(state),_cloneDeep(prevState));}});}export function initGlobalState(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(state===globalState){console.warn('[qiankun] state has not changed！');}else{var prevGlobalState=_cloneDeep(globalState);globalState=_cloneDeep(state);emitGlobal(globalState,prevGlobalState);}return getMicroAppStateActions(\"global-\".concat(+new Date()),true);}export function getMicroAppStateActions(id,isMaster){return{/**\n     * onGlobalStateChange 全局依赖监听\n     *\n     * 收集 setState 时所需要触发的依赖\n     *\n     * 限制条件：每个子应用只有一个激活状态的全局监听，新监听覆盖旧监听，若只是监听部分属性，请使用 onGlobalStateChange\n     *\n     * 这么设计是为了减少全局监听滥用导致的内存爆炸\n     *\n     * 依赖数据结构为：\n     * {\n     *   {id}: callback\n     * }\n     *\n     * @param callback\n     * @param fireImmediately\n     */onGlobalStateChange:function onGlobalStateChange(callback,fireImmediately){if(!(callback instanceof Function)){console.error('[qiankun] callback must be function!');return;}if(deps[id]){console.warn(\"[qiankun] '\".concat(id,\"' global listener already exists before this, new listener will overwrite it.\"));}deps[id]=callback;var cloneState=_cloneDeep(globalState);if(fireImmediately){callback(cloneState,cloneState);}},/**\n     * setGlobalState 更新 store 数据\n     *\n     * 1. 对输入 state 的第一层属性做校验，只有初始化时声明过的第一层（bucket）属性才会被更改\n     * 2. 修改 store 并触发全局监听\n     *\n     * @param state\n     */setGlobalState:function setGlobalState(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(state===globalState){console.warn('[qiankun] state has not changed！');return false;}var changeKeys=[];var prevGlobalState=_cloneDeep(globalState);globalState=_cloneDeep(Object.keys(state).reduce(function(_globalState,changeKey){if(isMaster||_globalState.hasOwnProperty(changeKey)){changeKeys.push(changeKey);return Object.assign(_globalState,_defineProperty({},changeKey,state[changeKey]));}console.warn(\"[qiankun] '\".concat(changeKey,\"' not declared when init state\\uFF01\"));return _globalState;},globalState));if(changeKeys.length===0){console.warn('[qiankun] state has not changed！');return false;}emitGlobal(globalState,prevGlobalState);return true;},// 注销该应用下的依赖\noffGlobalStateChange:function offGlobalStateChange(){delete deps[id];return true;}};}","map":{"version":3,"sources":["/Users/mory/Desktop/qiankun-react/master/src/utils/globalState.js"],"names":["_defineProperty","_cloneDeep","globalState","deps","emitGlobal","state","prevState","Object","keys","forEach","id","Function","initGlobalState","arguments","length","undefined","console","warn","prevGlobalState","getMicroAppStateActions","concat","Date","isMaster","onGlobalStateChange","callback","fireImmediately","error","cloneState","setGlobalState","changeKeys","reduce","_globalState","changeKey","hasOwnProperty","push","assign","offGlobalStateChange"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nvar globalState = {};\nvar deps = {}; // 触发全局监听\n\nfunction emitGlobal(state, prevState) {\n  Object.keys(deps).forEach(function (id) {\n    if (deps[id] instanceof Function) {\n      deps[id](_cloneDeep(state), _cloneDeep(prevState));\n    }\n  });\n}\n\nexport function initGlobalState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (state === globalState) {\n    console.warn('[qiankun] state has not changed！');\n  } else {\n    var prevGlobalState = _cloneDeep(globalState);\n\n    globalState = _cloneDeep(state);\n    emitGlobal(globalState, prevGlobalState);\n  }\n\n  return getMicroAppStateActions(\"global-\".concat(+new Date()), true);\n}\nexport function getMicroAppStateActions(id, isMaster) {\n  return {\n    /**\n     * onGlobalStateChange 全局依赖监听\n     *\n     * 收集 setState 时所需要触发的依赖\n     *\n     * 限制条件：每个子应用只有一个激活状态的全局监听，新监听覆盖旧监听，若只是监听部分属性，请使用 onGlobalStateChange\n     *\n     * 这么设计是为了减少全局监听滥用导致的内存爆炸\n     *\n     * 依赖数据结构为：\n     * {\n     *   {id}: callback\n     * }\n     *\n     * @param callback\n     * @param fireImmediately\n     */\n    onGlobalStateChange: function onGlobalStateChange(callback, fireImmediately) {\n      if (!(callback instanceof Function)) {\n        console.error('[qiankun] callback must be function!');\n        return;\n      }\n\n      if (deps[id]) {\n        console.warn(\"[qiankun] '\".concat(id, \"' global listener already exists before this, new listener will overwrite it.\"));\n      }\n\n      deps[id] = callback;\n\n      var cloneState = _cloneDeep(globalState);\n\n      if (fireImmediately) {\n        callback(cloneState, cloneState);\n      }\n    },\n\n    /**\n     * setGlobalState 更新 store 数据\n     *\n     * 1. 对输入 state 的第一层属性做校验，只有初始化时声明过的第一层（bucket）属性才会被更改\n     * 2. 修改 store 并触发全局监听\n     *\n     * @param state\n     */\n    setGlobalState: function setGlobalState() {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (state === globalState) {\n        console.warn('[qiankun] state has not changed！');\n        return false;\n      }\n\n      var changeKeys = [];\n\n      var prevGlobalState = _cloneDeep(globalState);\n\n      globalState = _cloneDeep(Object.keys(state).reduce(function (_globalState, changeKey) {\n        if (isMaster || _globalState.hasOwnProperty(changeKey)) {\n          changeKeys.push(changeKey);\n          return Object.assign(_globalState, _defineProperty({}, changeKey, state[changeKey]));\n        }\n\n        console.warn(\"[qiankun] '\".concat(changeKey, \"' not declared when init state\\uFF01\"));\n        return _globalState;\n      }, globalState));\n\n      if (changeKeys.length === 0) {\n        console.warn('[qiankun] state has not changed！');\n        return false;\n      }\n\n      emitGlobal(globalState, prevGlobalState);\n      return true;\n    },\n    // 注销该应用下的依赖\n    offGlobalStateChange: function offGlobalStateChange() {\n      delete deps[id];\n      return true;\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}