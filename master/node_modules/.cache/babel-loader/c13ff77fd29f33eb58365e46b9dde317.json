{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport LegacySandbox from './legacy/sandbox';\nimport { patchAtBootstrapping, patchAtMounting } from './patchers';\nimport ProxySandbox from './proxySandbox';\nimport SnapshotSandbox from './snapshotSandbox';\nexport { css } from './patchers';\n/**\n * 生成应用运行时沙箱\n *\n * 沙箱分两个类型：\n * 1. app 环境沙箱\n *  app 环境沙箱是指应用初始化过之后，应用会在什么样的上下文环境运行。每个应用的环境沙箱只会初始化一次，因为子应用只会触发一次 bootstrap 。\n *  子应用在切换时，实际上切换的是 app 环境沙箱。\n * 2. render 沙箱\n *  子应用在 app mount 开始前生成好的的沙箱。每次子应用切换过后，render 沙箱都会重现初始化。\n *\n * 这么设计的目的是为了保证每个子应用切换回来之后，还能运行在应用 bootstrap 之后的环境下。\n *\n * @param appName\n * @param elementGetter\n * @param scopedCSS\n * @param useLooseSandbox\n * @param excludeAssetFilter\n */\n\nexport function createSandboxContainer(appName, elementGetter, scopedCSS, useLooseSandbox, excludeAssetFilter) {\n  var sandbox;\n\n  if (window.Proxy) {\n    sandbox = useLooseSandbox ? new LegacySandbox(appName) : new ProxySandbox(appName);\n  } else {\n    sandbox = new SnapshotSandbox(appName);\n  } // some side effect could be be invoked while bootstrapping, such as dynamic stylesheet injection with style-loader, especially during the development phase\n\n\n  var bootstrappingFreers = patchAtBootstrapping(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter); // mounting freers are one-off and should be re-init at every mounting time\n\n  var mountingFreers = [];\n  var sideEffectsRebuilders = [];\n  return {\n    instance: sandbox,\n\n    /**\n     * 沙箱被 mount\n     * 可能是从 bootstrap 状态进入的 mount\n     * 也可能是从 unmount 之后再次唤醒进入 mount\n     */\n    mount: function mount() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var sideEffectsRebuildersAtBootstrapping, sideEffectsRebuildersAtMounting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                /* ------------------------------------------ 因为有上下文依赖（window），以下代码执行顺序不能变 ------------------------------------------ */\n\n                /* ------------------------------------------ 1. 启动/恢复 沙箱------------------------------------------ */\n                sandbox.active();\n                sideEffectsRebuildersAtBootstrapping = sideEffectsRebuilders.slice(0, bootstrappingFreers.length);\n                sideEffectsRebuildersAtMounting = sideEffectsRebuilders.slice(bootstrappingFreers.length); // must rebuild the side effects which added at bootstrapping firstly to recovery to nature state\n\n                if (sideEffectsRebuildersAtBootstrapping.length) {\n                  sideEffectsRebuildersAtBootstrapping.forEach(function (rebuild) {\n                    return rebuild();\n                  });\n                }\n                /* ------------------------------------------ 2. 开启全局变量补丁 ------------------------------------------*/\n                // render 沙箱启动时开始劫持各类全局监听，尽量不要在应用初始化阶段有 事件监听/定时器 等副作用\n\n\n                mountingFreers = patchAtMounting(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter);\n                /* ------------------------------------------ 3. 重置一些初始化时的副作用 ------------------------------------------*/\n                // 存在 rebuilder 则表明有些副作用需要重建\n\n                if (sideEffectsRebuildersAtMounting.length) {\n                  sideEffectsRebuildersAtMounting.forEach(function (rebuild) {\n                    return rebuild();\n                  });\n                } // clean up rebuilders\n\n\n                sideEffectsRebuilders = [];\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    },\n\n    /**\n     * 恢复 global 状态，使其能回到应用加载之前的状态\n     */\n    unmount: function unmount() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // record the rebuilders of window side effects (event listeners or timers)\n                // note that the frees of mounting phase are one-off as it will be re-init at next mounting\n                sideEffectsRebuilders = [].concat(_toConsumableArray(bootstrappingFreers), _toConsumableArray(mountingFreers)).map(function (free) {\n                  return free();\n                });\n                sandbox.inactive();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["/Users/mory/Desktop/qiankun-react/master/node_modules/qiankun/es/sandbox/index.js"],"names":["_toConsumableArray","_regeneratorRuntime","__awaiter","LegacySandbox","patchAtBootstrapping","patchAtMounting","ProxySandbox","SnapshotSandbox","css","createSandboxContainer","appName","elementGetter","scopedCSS","useLooseSandbox","excludeAssetFilter","sandbox","window","Proxy","bootstrappingFreers","mountingFreers","sideEffectsRebuilders","instance","mount","mark","_callee","sideEffectsRebuildersAtBootstrapping","sideEffectsRebuildersAtMounting","wrap","_callee$","_context","prev","next","active","slice","length","forEach","rebuild","stop","unmount","_callee2","_callee2$","_context2","concat","map","free","inactive"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport LegacySandbox from './legacy/sandbox';\nimport { patchAtBootstrapping, patchAtMounting } from './patchers';\nimport ProxySandbox from './proxySandbox';\nimport SnapshotSandbox from './snapshotSandbox';\nexport { css } from './patchers';\n/**\n * 生成应用运行时沙箱\n *\n * 沙箱分两个类型：\n * 1. app 环境沙箱\n *  app 环境沙箱是指应用初始化过之后，应用会在什么样的上下文环境运行。每个应用的环境沙箱只会初始化一次，因为子应用只会触发一次 bootstrap 。\n *  子应用在切换时，实际上切换的是 app 环境沙箱。\n * 2. render 沙箱\n *  子应用在 app mount 开始前生成好的的沙箱。每次子应用切换过后，render 沙箱都会重现初始化。\n *\n * 这么设计的目的是为了保证每个子应用切换回来之后，还能运行在应用 bootstrap 之后的环境下。\n *\n * @param appName\n * @param elementGetter\n * @param scopedCSS\n * @param useLooseSandbox\n * @param excludeAssetFilter\n */\n\nexport function createSandboxContainer(appName, elementGetter, scopedCSS, useLooseSandbox, excludeAssetFilter) {\n  var sandbox;\n\n  if (window.Proxy) {\n    sandbox = useLooseSandbox ? new LegacySandbox(appName) : new ProxySandbox(appName);\n  } else {\n    sandbox = new SnapshotSandbox(appName);\n  } // some side effect could be be invoked while bootstrapping, such as dynamic stylesheet injection with style-loader, especially during the development phase\n\n\n  var bootstrappingFreers = patchAtBootstrapping(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter); // mounting freers are one-off and should be re-init at every mounting time\n\n  var mountingFreers = [];\n  var sideEffectsRebuilders = [];\n  return {\n    instance: sandbox,\n\n    /**\n     * 沙箱被 mount\n     * 可能是从 bootstrap 状态进入的 mount\n     * 也可能是从 unmount 之后再次唤醒进入 mount\n     */\n    mount: function mount() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var sideEffectsRebuildersAtBootstrapping, sideEffectsRebuildersAtMounting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                /* ------------------------------------------ 因为有上下文依赖（window），以下代码执行顺序不能变 ------------------------------------------ */\n\n                /* ------------------------------------------ 1. 启动/恢复 沙箱------------------------------------------ */\n                sandbox.active();\n                sideEffectsRebuildersAtBootstrapping = sideEffectsRebuilders.slice(0, bootstrappingFreers.length);\n                sideEffectsRebuildersAtMounting = sideEffectsRebuilders.slice(bootstrappingFreers.length); // must rebuild the side effects which added at bootstrapping firstly to recovery to nature state\n\n                if (sideEffectsRebuildersAtBootstrapping.length) {\n                  sideEffectsRebuildersAtBootstrapping.forEach(function (rebuild) {\n                    return rebuild();\n                  });\n                }\n                /* ------------------------------------------ 2. 开启全局变量补丁 ------------------------------------------*/\n                // render 沙箱启动时开始劫持各类全局监听，尽量不要在应用初始化阶段有 事件监听/定时器 等副作用\n\n\n                mountingFreers = patchAtMounting(appName, elementGetter, sandbox, scopedCSS, excludeAssetFilter);\n                /* ------------------------------------------ 3. 重置一些初始化时的副作用 ------------------------------------------*/\n                // 存在 rebuilder 则表明有些副作用需要重建\n\n                if (sideEffectsRebuildersAtMounting.length) {\n                  sideEffectsRebuildersAtMounting.forEach(function (rebuild) {\n                    return rebuild();\n                  });\n                } // clean up rebuilders\n\n\n                sideEffectsRebuilders = [];\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    },\n\n    /**\n     * 恢复 global 状态，使其能回到应用加载之前的状态\n     */\n    unmount: function unmount() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // record the rebuilders of window side effects (event listeners or timers)\n                // note that the frees of mounting phase are one-off as it will be re-init at next mounting\n                sideEffectsRebuilders = [].concat(_toConsumableArray(bootstrappingFreers), _toConsumableArray(mountingFreers)).map(function (free) {\n                  return free();\n                });\n                sandbox.inactive();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}