{"ast":null,"code":"import _isFunction from \"lodash/isFunction\";\nimport _noop from \"lodash/noop\";\nexport default function patch() {\n  // FIXME umi unmount feature request\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var rawHistoryListen = function rawHistoryListen(_) {\n    return _noop;\n  };\n\n  var historyListeners = [];\n  var historyUnListens = [];\n\n  if (window.g_history && _isFunction(window.g_history.listen)) {\n    rawHistoryListen = window.g_history.listen.bind(window.g_history);\n\n    window.g_history.listen = function (listener) {\n      historyListeners.push(listener);\n      var unListen = rawHistoryListen(listener);\n      historyUnListens.push(unListen);\n      return function () {\n        unListen();\n        historyUnListens.splice(historyUnListens.indexOf(unListen), 1);\n        historyListeners.splice(historyListeners.indexOf(listener), 1);\n      };\n    };\n  }\n\n  return function free() {\n    var rebuild = _noop;\n    /*\n     还存在余量 listener 表明未被卸载，存在两种情况\n     1. 应用在 unmout 时未正确卸载 listener\n     2. listener 是应用 mount 之前绑定的，\n     第二种情况下应用在下次 mount 之前需重新绑定该 listener\n     */\n\n    if (historyListeners.length) {\n      rebuild = function rebuild() {\n        // 必须使用 window.g_history.listen 的方式重新绑定 listener，从而能保证 rebuild 这部分也能被捕获到，否则在应用卸载后无法正确的移除这部分副作用\n        historyListeners.forEach(function (listener) {\n          return window.g_history.listen(listener);\n        });\n      };\n    } // 卸载余下的 listener\n\n\n    historyUnListens.forEach(function (unListen) {\n      return unListen();\n    }); // restore\n\n    if (window.g_history && _isFunction(window.g_history.listen)) {\n      window.g_history.listen = rawHistoryListen;\n    }\n\n    return rebuild;\n  };\n}","map":{"version":3,"sources":["/Users/mory/Desktop/qiankun-react/master/node_modules/qiankun/es/sandbox/patchers/historyListener.js"],"names":["_isFunction","_noop","patch","rawHistoryListen","_","historyListeners","historyUnListens","window","g_history","listen","bind","listener","push","unListen","splice","indexOf","free","rebuild","length","forEach"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,eAAe,SAASC,KAAT,GAAiB;AAC9B;AACA;AACA,MAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,CAA1B,EAA6B;AAClD,WAAOH,KAAP;AACD,GAFD;;AAIA,MAAII,gBAAgB,GAAG,EAAvB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;;AAEA,MAAIC,MAAM,CAACC,SAAP,IAAoBR,WAAW,CAACO,MAAM,CAACC,SAAP,CAAiBC,MAAlB,CAAnC,EAA8D;AAC5DN,IAAAA,gBAAgB,GAAGI,MAAM,CAACC,SAAP,CAAiBC,MAAjB,CAAwBC,IAAxB,CAA6BH,MAAM,CAACC,SAApC,CAAnB;;AAEAD,IAAAA,MAAM,CAACC,SAAP,CAAiBC,MAAjB,GAA0B,UAAUE,QAAV,EAAoB;AAC5CN,MAAAA,gBAAgB,CAACO,IAAjB,CAAsBD,QAAtB;AACA,UAAIE,QAAQ,GAAGV,gBAAgB,CAACQ,QAAD,CAA/B;AACAL,MAAAA,gBAAgB,CAACM,IAAjB,CAAsBC,QAAtB;AACA,aAAO,YAAY;AACjBA,QAAAA,QAAQ;AACRP,QAAAA,gBAAgB,CAACQ,MAAjB,CAAwBR,gBAAgB,CAACS,OAAjB,CAAyBF,QAAzB,CAAxB,EAA4D,CAA5D;AACAR,QAAAA,gBAAgB,CAACS,MAAjB,CAAwBT,gBAAgB,CAACU,OAAjB,CAAyBJ,QAAzB,CAAxB,EAA4D,CAA5D;AACD,OAJD;AAKD,KATD;AAUD;;AAED,SAAO,SAASK,IAAT,GAAgB;AACrB,QAAIC,OAAO,GAAGhB,KAAd;AACA;AACJ;AACA;AACA;AACA;AACA;;AAEI,QAAII,gBAAgB,CAACa,MAArB,EAA6B;AAC3BD,MAAAA,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC3B;AACAZ,QAAAA,gBAAgB,CAACc,OAAjB,CAAyB,UAAUR,QAAV,EAAoB;AAC3C,iBAAOJ,MAAM,CAACC,SAAP,CAAiBC,MAAjB,CAAwBE,QAAxB,CAAP;AACD,SAFD;AAGD,OALD;AAMD,KAhBoB,CAgBnB;;;AAGFL,IAAAA,gBAAgB,CAACa,OAAjB,CAAyB,UAAUN,QAAV,EAAoB;AAC3C,aAAOA,QAAQ,EAAf;AACD,KAFD,EAnBqB,CAqBjB;;AAEJ,QAAIN,MAAM,CAACC,SAAP,IAAoBR,WAAW,CAACO,MAAM,CAACC,SAAP,CAAiBC,MAAlB,CAAnC,EAA8D;AAC5DF,MAAAA,MAAM,CAACC,SAAP,CAAiBC,MAAjB,GAA0BN,gBAA1B;AACD;;AAED,WAAOc,OAAP;AACD,GA5BD;AA6BD","sourcesContent":["import _isFunction from \"lodash/isFunction\";\nimport _noop from \"lodash/noop\";\nexport default function patch() {\n  // FIXME umi unmount feature request\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  var rawHistoryListen = function rawHistoryListen(_) {\n    return _noop;\n  };\n\n  var historyListeners = [];\n  var historyUnListens = [];\n\n  if (window.g_history && _isFunction(window.g_history.listen)) {\n    rawHistoryListen = window.g_history.listen.bind(window.g_history);\n\n    window.g_history.listen = function (listener) {\n      historyListeners.push(listener);\n      var unListen = rawHistoryListen(listener);\n      historyUnListens.push(unListen);\n      return function () {\n        unListen();\n        historyUnListens.splice(historyUnListens.indexOf(unListen), 1);\n        historyListeners.splice(historyListeners.indexOf(listener), 1);\n      };\n    };\n  }\n\n  return function free() {\n    var rebuild = _noop;\n    /*\n     还存在余量 listener 表明未被卸载，存在两种情况\n     1. 应用在 unmout 时未正确卸载 listener\n     2. listener 是应用 mount 之前绑定的，\n     第二种情况下应用在下次 mount 之前需重新绑定该 listener\n     */\n\n    if (historyListeners.length) {\n      rebuild = function rebuild() {\n        // 必须使用 window.g_history.listen 的方式重新绑定 listener，从而能保证 rebuild 这部分也能被捕获到，否则在应用卸载后无法正确的移除这部分副作用\n        historyListeners.forEach(function (listener) {\n          return window.g_history.listen(listener);\n        });\n      };\n    } // 卸载余下的 listener\n\n\n    historyUnListens.forEach(function (unListen) {\n      return unListen();\n    }); // restore\n\n    if (window.g_history && _isFunction(window.g_history.listen)) {\n      window.g_history.listen = rawHistoryListen;\n    }\n\n    return rebuild;\n  };\n}"]},"metadata":{},"sourceType":"module"}